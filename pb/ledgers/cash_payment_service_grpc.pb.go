// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: ledgers/cash_payment_service.proto

package ledgers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CashPaymentServiceClient is the client API for CashPaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CashPaymentServiceClient interface {
	Create(ctx context.Context, in *CashPayment, opts ...grpc.CallOption) (*CashPayment, error)
	View(ctx context.Context, in *Id, opts ...grpc.CallOption) (*CashPayment, error)
	Update(ctx context.Context, in *Id, opts ...grpc.CallOption) (*CashPayment, error)
	List(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (CashPaymentService_ListClient, error)
}

type cashPaymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCashPaymentServiceClient(cc grpc.ClientConnInterface) CashPaymentServiceClient {
	return &cashPaymentServiceClient{cc}
}

func (c *cashPaymentServiceClient) Create(ctx context.Context, in *CashPayment, opts ...grpc.CallOption) (*CashPayment, error) {
	out := new(CashPayment)
	err := c.cc.Invoke(ctx, "/wiradata.ledgers.CashPaymentService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashPaymentServiceClient) View(ctx context.Context, in *Id, opts ...grpc.CallOption) (*CashPayment, error) {
	out := new(CashPayment)
	err := c.cc.Invoke(ctx, "/wiradata.ledgers.CashPaymentService/View", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashPaymentServiceClient) Update(ctx context.Context, in *Id, opts ...grpc.CallOption) (*CashPayment, error) {
	out := new(CashPayment)
	err := c.cc.Invoke(ctx, "/wiradata.ledgers.CashPaymentService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashPaymentServiceClient) List(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (CashPaymentService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &CashPaymentService_ServiceDesc.Streams[0], "/wiradata.ledgers.CashPaymentService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &cashPaymentServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CashPaymentService_ListClient interface {
	Recv() (*CashPayment, error)
	grpc.ClientStream
}

type cashPaymentServiceListClient struct {
	grpc.ClientStream
}

func (x *cashPaymentServiceListClient) Recv() (*CashPayment, error) {
	m := new(CashPayment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CashPaymentServiceServer is the server API for CashPaymentService service.
// All implementations must embed UnimplementedCashPaymentServiceServer
// for forward compatibility
type CashPaymentServiceServer interface {
	Create(context.Context, *CashPayment) (*CashPayment, error)
	View(context.Context, *Id) (*CashPayment, error)
	Update(context.Context, *Id) (*CashPayment, error)
	List(*EmptyMessage, CashPaymentService_ListServer) error
	mustEmbedUnimplementedCashPaymentServiceServer()
}

// UnimplementedCashPaymentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCashPaymentServiceServer struct {
}

func (UnimplementedCashPaymentServiceServer) Create(context.Context, *CashPayment) (*CashPayment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCashPaymentServiceServer) View(context.Context, *Id) (*CashPayment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedCashPaymentServiceServer) Update(context.Context, *Id) (*CashPayment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCashPaymentServiceServer) List(*EmptyMessage, CashPaymentService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCashPaymentServiceServer) mustEmbedUnimplementedCashPaymentServiceServer() {}

// UnsafeCashPaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CashPaymentServiceServer will
// result in compilation errors.
type UnsafeCashPaymentServiceServer interface {
	mustEmbedUnimplementedCashPaymentServiceServer()
}

func RegisterCashPaymentServiceServer(s grpc.ServiceRegistrar, srv CashPaymentServiceServer) {
	s.RegisterService(&CashPaymentService_ServiceDesc, srv)
}

func _CashPaymentService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CashPayment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashPaymentServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.ledgers.CashPaymentService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashPaymentServiceServer).Create(ctx, req.(*CashPayment))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashPaymentService_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashPaymentServiceServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.ledgers.CashPaymentService/View",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashPaymentServiceServer).View(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashPaymentService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashPaymentServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.ledgers.CashPaymentService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashPaymentServiceServer).Update(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashPaymentService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CashPaymentServiceServer).List(m, &cashPaymentServiceListServer{stream})
}

type CashPaymentService_ListServer interface {
	Send(*CashPayment) error
	grpc.ServerStream
}

type cashPaymentServiceListServer struct {
	grpc.ServerStream
}

func (x *cashPaymentServiceListServer) Send(m *CashPayment) error {
	return x.ServerStream.SendMsg(m)
}

// CashPaymentService_ServiceDesc is the grpc.ServiceDesc for CashPaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CashPaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wiradata.ledgers.CashPaymentService",
	HandlerType: (*CashPaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CashPaymentService_Create_Handler,
		},
		{
			MethodName: "View",
			Handler:    _CashPaymentService_View_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CashPaymentService_Update_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _CashPaymentService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ledgers/cash_payment_service.proto",
}
