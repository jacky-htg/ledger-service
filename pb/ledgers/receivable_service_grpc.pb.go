// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: ledgers/receivable_service.proto

package ledgers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReceivableServiceClient is the client API for ReceivableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReceivableServiceClient interface {
	Create(ctx context.Context, in *Receivable, opts ...grpc.CallOption) (*Receivable, error)
	ViewByCustomerId(ctx context.Context, in *ViewByCustomerIdInput, opts ...grpc.CallOption) (*Receivables, error)
	ViewBySalesId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Receivable, error)
}

type receivableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReceivableServiceClient(cc grpc.ClientConnInterface) ReceivableServiceClient {
	return &receivableServiceClient{cc}
}

func (c *receivableServiceClient) Create(ctx context.Context, in *Receivable, opts ...grpc.CallOption) (*Receivable, error) {
	out := new(Receivable)
	err := c.cc.Invoke(ctx, "/wiradata.ledgers.ReceivableService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receivableServiceClient) ViewByCustomerId(ctx context.Context, in *ViewByCustomerIdInput, opts ...grpc.CallOption) (*Receivables, error) {
	out := new(Receivables)
	err := c.cc.Invoke(ctx, "/wiradata.ledgers.ReceivableService/ViewByCustomerId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receivableServiceClient) ViewBySalesId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Receivable, error) {
	out := new(Receivable)
	err := c.cc.Invoke(ctx, "/wiradata.ledgers.ReceivableService/ViewBySalesId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceivableServiceServer is the server API for ReceivableService service.
// All implementations must embed UnimplementedReceivableServiceServer
// for forward compatibility
type ReceivableServiceServer interface {
	Create(context.Context, *Receivable) (*Receivable, error)
	ViewByCustomerId(context.Context, *ViewByCustomerIdInput) (*Receivables, error)
	ViewBySalesId(context.Context, *Id) (*Receivable, error)
	mustEmbedUnimplementedReceivableServiceServer()
}

// UnimplementedReceivableServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReceivableServiceServer struct {
}

func (UnimplementedReceivableServiceServer) Create(context.Context, *Receivable) (*Receivable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedReceivableServiceServer) ViewByCustomerId(context.Context, *ViewByCustomerIdInput) (*Receivables, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewByCustomerId not implemented")
}
func (UnimplementedReceivableServiceServer) ViewBySalesId(context.Context, *Id) (*Receivable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewBySalesId not implemented")
}
func (UnimplementedReceivableServiceServer) mustEmbedUnimplementedReceivableServiceServer() {}

// UnsafeReceivableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceivableServiceServer will
// result in compilation errors.
type UnsafeReceivableServiceServer interface {
	mustEmbedUnimplementedReceivableServiceServer()
}

func RegisterReceivableServiceServer(s grpc.ServiceRegistrar, srv ReceivableServiceServer) {
	s.RegisterService(&ReceivableService_ServiceDesc, srv)
}

func _ReceivableService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Receivable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivableServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.ledgers.ReceivableService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivableServiceServer).Create(ctx, req.(*Receivable))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceivableService_ViewByCustomerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewByCustomerIdInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivableServiceServer).ViewByCustomerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.ledgers.ReceivableService/ViewByCustomerId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivableServiceServer).ViewByCustomerId(ctx, req.(*ViewByCustomerIdInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceivableService_ViewBySalesId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivableServiceServer).ViewBySalesId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.ledgers.ReceivableService/ViewBySalesId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivableServiceServer).ViewBySalesId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// ReceivableService_ServiceDesc is the grpc.ServiceDesc for ReceivableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReceivableService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wiradata.ledgers.ReceivableService",
	HandlerType: (*ReceivableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ReceivableService_Create_Handler,
		},
		{
			MethodName: "ViewByCustomerId",
			Handler:    _ReceivableService_ViewByCustomerId_Handler,
		},
		{
			MethodName: "ViewBySalesId",
			Handler:    _ReceivableService_ViewBySalesId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ledgers/receivable_service.proto",
}
