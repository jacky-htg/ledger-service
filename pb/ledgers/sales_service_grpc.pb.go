// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: ledgers/sales_service.proto

package ledgers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SalesServiceClient is the client API for SalesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SalesServiceClient interface {
	Create(ctx context.Context, in *Sales, opts ...grpc.CallOption) (*Sales, error)
	Update(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Sales, error)
}

type salesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSalesServiceClient(cc grpc.ClientConnInterface) SalesServiceClient {
	return &salesServiceClient{cc}
}

func (c *salesServiceClient) Create(ctx context.Context, in *Sales, opts ...grpc.CallOption) (*Sales, error) {
	out := new(Sales)
	err := c.cc.Invoke(ctx, "/wiradata.ledgers.SalesService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesServiceClient) Update(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Sales, error) {
	out := new(Sales)
	err := c.cc.Invoke(ctx, "/wiradata.ledgers.SalesService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SalesServiceServer is the server API for SalesService service.
// All implementations must embed UnimplementedSalesServiceServer
// for forward compatibility
type SalesServiceServer interface {
	Create(context.Context, *Sales) (*Sales, error)
	Update(context.Context, *Id) (*Sales, error)
	mustEmbedUnimplementedSalesServiceServer()
}

// UnimplementedSalesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSalesServiceServer struct {
}

func (UnimplementedSalesServiceServer) Create(context.Context, *Sales) (*Sales, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSalesServiceServer) Update(context.Context, *Id) (*Sales, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSalesServiceServer) mustEmbedUnimplementedSalesServiceServer() {}

// UnsafeSalesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SalesServiceServer will
// result in compilation errors.
type UnsafeSalesServiceServer interface {
	mustEmbedUnimplementedSalesServiceServer()
}

func RegisterSalesServiceServer(s grpc.ServiceRegistrar, srv SalesServiceServer) {
	s.RegisterService(&SalesService_ServiceDesc, srv)
}

func _SalesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sales)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.ledgers.SalesService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesServiceServer).Create(ctx, req.(*Sales))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.ledgers.SalesService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesServiceServer).Update(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// SalesService_ServiceDesc is the grpc.ServiceDesc for SalesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SalesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wiradata.ledgers.SalesService",
	HandlerType: (*SalesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SalesService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SalesService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ledgers/sales_service.proto",
}
