// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: ledgers/acc_configuration_service.proto

package ledgers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccConfigurationServiceClient is the client API for AccConfigurationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccConfigurationServiceClient interface {
	List(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (AccConfigurationService_ListClient, error)
	Create(ctx context.Context, in *AccConfigurationDetail, opts ...grpc.CallOption) (*AccConfigurationDetail, error)
	Update(ctx context.Context, in *AccConfigurationDetail, opts ...grpc.CallOption) (*AccConfigurationDetail, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*BoolMessage, error)
}

type accConfigurationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccConfigurationServiceClient(cc grpc.ClientConnInterface) AccConfigurationServiceClient {
	return &accConfigurationServiceClient{cc}
}

func (c *accConfigurationServiceClient) List(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (AccConfigurationService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccConfigurationService_ServiceDesc.Streams[0], "/wiradata.ledgers.AccConfigurationService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &accConfigurationServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccConfigurationService_ListClient interface {
	Recv() (*AccConfigurationDetail, error)
	grpc.ClientStream
}

type accConfigurationServiceListClient struct {
	grpc.ClientStream
}

func (x *accConfigurationServiceListClient) Recv() (*AccConfigurationDetail, error) {
	m := new(AccConfigurationDetail)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accConfigurationServiceClient) Create(ctx context.Context, in *AccConfigurationDetail, opts ...grpc.CallOption) (*AccConfigurationDetail, error) {
	out := new(AccConfigurationDetail)
	err := c.cc.Invoke(ctx, "/wiradata.ledgers.AccConfigurationService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accConfigurationServiceClient) Update(ctx context.Context, in *AccConfigurationDetail, opts ...grpc.CallOption) (*AccConfigurationDetail, error) {
	out := new(AccConfigurationDetail)
	err := c.cc.Invoke(ctx, "/wiradata.ledgers.AccConfigurationService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accConfigurationServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*BoolMessage, error) {
	out := new(BoolMessage)
	err := c.cc.Invoke(ctx, "/wiradata.ledgers.AccConfigurationService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccConfigurationServiceServer is the server API for AccConfigurationService service.
// All implementations must embed UnimplementedAccConfigurationServiceServer
// for forward compatibility
type AccConfigurationServiceServer interface {
	List(*EmptyMessage, AccConfigurationService_ListServer) error
	Create(context.Context, *AccConfigurationDetail) (*AccConfigurationDetail, error)
	Update(context.Context, *AccConfigurationDetail) (*AccConfigurationDetail, error)
	Delete(context.Context, *Id) (*BoolMessage, error)
	mustEmbedUnimplementedAccConfigurationServiceServer()
}

// UnimplementedAccConfigurationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccConfigurationServiceServer struct {
}

func (UnimplementedAccConfigurationServiceServer) List(*EmptyMessage, AccConfigurationService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAccConfigurationServiceServer) Create(context.Context, *AccConfigurationDetail) (*AccConfigurationDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAccConfigurationServiceServer) Update(context.Context, *AccConfigurationDetail) (*AccConfigurationDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAccConfigurationServiceServer) Delete(context.Context, *Id) (*BoolMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAccConfigurationServiceServer) mustEmbedUnimplementedAccConfigurationServiceServer() {
}

// UnsafeAccConfigurationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccConfigurationServiceServer will
// result in compilation errors.
type UnsafeAccConfigurationServiceServer interface {
	mustEmbedUnimplementedAccConfigurationServiceServer()
}

func RegisterAccConfigurationServiceServer(s grpc.ServiceRegistrar, srv AccConfigurationServiceServer) {
	s.RegisterService(&AccConfigurationService_ServiceDesc, srv)
}

func _AccConfigurationService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccConfigurationServiceServer).List(m, &accConfigurationServiceListServer{stream})
}

type AccConfigurationService_ListServer interface {
	Send(*AccConfigurationDetail) error
	grpc.ServerStream
}

type accConfigurationServiceListServer struct {
	grpc.ServerStream
}

func (x *accConfigurationServiceListServer) Send(m *AccConfigurationDetail) error {
	return x.ServerStream.SendMsg(m)
}

func _AccConfigurationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccConfigurationDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccConfigurationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.ledgers.AccConfigurationService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccConfigurationServiceServer).Create(ctx, req.(*AccConfigurationDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccConfigurationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccConfigurationDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccConfigurationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.ledgers.AccConfigurationService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccConfigurationServiceServer).Update(ctx, req.(*AccConfigurationDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccConfigurationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccConfigurationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.ledgers.AccConfigurationService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccConfigurationServiceServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// AccConfigurationService_ServiceDesc is the grpc.ServiceDesc for AccConfigurationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccConfigurationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wiradata.ledgers.AccConfigurationService",
	HandlerType: (*AccConfigurationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AccConfigurationService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AccConfigurationService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AccConfigurationService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _AccConfigurationService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ledgers/acc_configuration_service.proto",
}
