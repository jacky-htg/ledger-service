// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: ledgers/return_purchase_service.proto

package ledgers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReturnPurchaseServiceClient is the client API for ReturnPurchaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReturnPurchaseServiceClient interface {
	Create(ctx context.Context, in *ReturnPurchase, opts ...grpc.CallOption) (*ReturnPurchase, error)
	Update(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ReturnPurchase, error)
}

type returnPurchaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReturnPurchaseServiceClient(cc grpc.ClientConnInterface) ReturnPurchaseServiceClient {
	return &returnPurchaseServiceClient{cc}
}

func (c *returnPurchaseServiceClient) Create(ctx context.Context, in *ReturnPurchase, opts ...grpc.CallOption) (*ReturnPurchase, error) {
	out := new(ReturnPurchase)
	err := c.cc.Invoke(ctx, "/wiradata.ledgers.ReturnPurchaseService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *returnPurchaseServiceClient) Update(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ReturnPurchase, error) {
	out := new(ReturnPurchase)
	err := c.cc.Invoke(ctx, "/wiradata.ledgers.ReturnPurchaseService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReturnPurchaseServiceServer is the server API for ReturnPurchaseService service.
// All implementations must embed UnimplementedReturnPurchaseServiceServer
// for forward compatibility
type ReturnPurchaseServiceServer interface {
	Create(context.Context, *ReturnPurchase) (*ReturnPurchase, error)
	Update(context.Context, *Id) (*ReturnPurchase, error)
	mustEmbedUnimplementedReturnPurchaseServiceServer()
}

// UnimplementedReturnPurchaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReturnPurchaseServiceServer struct {
}

func (UnimplementedReturnPurchaseServiceServer) Create(context.Context, *ReturnPurchase) (*ReturnPurchase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedReturnPurchaseServiceServer) Update(context.Context, *Id) (*ReturnPurchase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedReturnPurchaseServiceServer) mustEmbedUnimplementedReturnPurchaseServiceServer() {}

// UnsafeReturnPurchaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReturnPurchaseServiceServer will
// result in compilation errors.
type UnsafeReturnPurchaseServiceServer interface {
	mustEmbedUnimplementedReturnPurchaseServiceServer()
}

func RegisterReturnPurchaseServiceServer(s grpc.ServiceRegistrar, srv ReturnPurchaseServiceServer) {
	s.RegisterService(&ReturnPurchaseService_ServiceDesc, srv)
}

func _ReturnPurchaseService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnPurchase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReturnPurchaseServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.ledgers.ReturnPurchaseService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReturnPurchaseServiceServer).Create(ctx, req.(*ReturnPurchase))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReturnPurchaseService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReturnPurchaseServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.ledgers.ReturnPurchaseService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReturnPurchaseServiceServer).Update(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// ReturnPurchaseService_ServiceDesc is the grpc.ServiceDesc for ReturnPurchaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReturnPurchaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wiradata.ledgers.ReturnPurchaseService",
	HandlerType: (*ReturnPurchaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ReturnPurchaseService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ReturnPurchaseService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ledgers/return_purchase_service.proto",
}
