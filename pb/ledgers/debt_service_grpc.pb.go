// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: ledgers/debt_service.proto

package ledgers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DebtServiceClient is the client API for DebtService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DebtServiceClient interface {
	Create(ctx context.Context, in *Debt, opts ...grpc.CallOption) (*Debt, error)
	ViewBySupplierId(ctx context.Context, in *ViewBySupplierIdInput, opts ...grpc.CallOption) (*Debts, error)
	ViewByPurchaseId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Debt, error)
}

type debtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDebtServiceClient(cc grpc.ClientConnInterface) DebtServiceClient {
	return &debtServiceClient{cc}
}

func (c *debtServiceClient) Create(ctx context.Context, in *Debt, opts ...grpc.CallOption) (*Debt, error) {
	out := new(Debt)
	err := c.cc.Invoke(ctx, "/wiradata.ledgers.DebtService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debtServiceClient) ViewBySupplierId(ctx context.Context, in *ViewBySupplierIdInput, opts ...grpc.CallOption) (*Debts, error) {
	out := new(Debts)
	err := c.cc.Invoke(ctx, "/wiradata.ledgers.DebtService/ViewBySupplierId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debtServiceClient) ViewByPurchaseId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Debt, error) {
	out := new(Debt)
	err := c.cc.Invoke(ctx, "/wiradata.ledgers.DebtService/ViewByPurchaseId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebtServiceServer is the server API for DebtService service.
// All implementations must embed UnimplementedDebtServiceServer
// for forward compatibility
type DebtServiceServer interface {
	Create(context.Context, *Debt) (*Debt, error)
	ViewBySupplierId(context.Context, *ViewBySupplierIdInput) (*Debts, error)
	ViewByPurchaseId(context.Context, *Id) (*Debt, error)
	mustEmbedUnimplementedDebtServiceServer()
}

// UnimplementedDebtServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDebtServiceServer struct {
}

func (UnimplementedDebtServiceServer) Create(context.Context, *Debt) (*Debt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDebtServiceServer) ViewBySupplierId(context.Context, *ViewBySupplierIdInput) (*Debts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewBySupplierId not implemented")
}
func (UnimplementedDebtServiceServer) ViewByPurchaseId(context.Context, *Id) (*Debt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewByPurchaseId not implemented")
}
func (UnimplementedDebtServiceServer) mustEmbedUnimplementedDebtServiceServer() {}

// UnsafeDebtServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DebtServiceServer will
// result in compilation errors.
type UnsafeDebtServiceServer interface {
	mustEmbedUnimplementedDebtServiceServer()
}

func RegisterDebtServiceServer(s grpc.ServiceRegistrar, srv DebtServiceServer) {
	s.RegisterService(&DebtService_ServiceDesc, srv)
}

func _DebtService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Debt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebtServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.ledgers.DebtService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebtServiceServer).Create(ctx, req.(*Debt))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebtService_ViewBySupplierId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewBySupplierIdInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebtServiceServer).ViewBySupplierId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.ledgers.DebtService/ViewBySupplierId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebtServiceServer).ViewBySupplierId(ctx, req.(*ViewBySupplierIdInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebtService_ViewByPurchaseId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebtServiceServer).ViewByPurchaseId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.ledgers.DebtService/ViewByPurchaseId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebtServiceServer).ViewByPurchaseId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// DebtService_ServiceDesc is the grpc.ServiceDesc for DebtService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DebtService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wiradata.ledgers.DebtService",
	HandlerType: (*DebtServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DebtService_Create_Handler,
		},
		{
			MethodName: "ViewBySupplierId",
			Handler:    _DebtService_ViewBySupplierId_Handler,
		},
		{
			MethodName: "ViewByPurchaseId",
			Handler:    _DebtService_ViewByPurchaseId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ledgers/debt_service.proto",
}
