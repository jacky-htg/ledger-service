// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: ledgers/bank_receipt_service.proto

package ledgers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BankReceiptServiceClient is the client API for BankReceiptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankReceiptServiceClient interface {
	Create(ctx context.Context, in *BankReceipt, opts ...grpc.CallOption) (*BankReceipt, error)
	View(ctx context.Context, in *Id, opts ...grpc.CallOption) (*BankReceipt, error)
	Update(ctx context.Context, in *Id, opts ...grpc.CallOption) (*BankReceipt, error)
	List(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (BankReceiptService_ListClient, error)
}

type bankReceiptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankReceiptServiceClient(cc grpc.ClientConnInterface) BankReceiptServiceClient {
	return &bankReceiptServiceClient{cc}
}

func (c *bankReceiptServiceClient) Create(ctx context.Context, in *BankReceipt, opts ...grpc.CallOption) (*BankReceipt, error) {
	out := new(BankReceipt)
	err := c.cc.Invoke(ctx, "/wiradata.ledgers.BankReceiptService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankReceiptServiceClient) View(ctx context.Context, in *Id, opts ...grpc.CallOption) (*BankReceipt, error) {
	out := new(BankReceipt)
	err := c.cc.Invoke(ctx, "/wiradata.ledgers.BankReceiptService/View", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankReceiptServiceClient) Update(ctx context.Context, in *Id, opts ...grpc.CallOption) (*BankReceipt, error) {
	out := new(BankReceipt)
	err := c.cc.Invoke(ctx, "/wiradata.ledgers.BankReceiptService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankReceiptServiceClient) List(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (BankReceiptService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &BankReceiptService_ServiceDesc.Streams[0], "/wiradata.ledgers.BankReceiptService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &bankReceiptServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BankReceiptService_ListClient interface {
	Recv() (*BankReceipt, error)
	grpc.ClientStream
}

type bankReceiptServiceListClient struct {
	grpc.ClientStream
}

func (x *bankReceiptServiceListClient) Recv() (*BankReceipt, error) {
	m := new(BankReceipt)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BankReceiptServiceServer is the server API for BankReceiptService service.
// All implementations must embed UnimplementedBankReceiptServiceServer
// for forward compatibility
type BankReceiptServiceServer interface {
	Create(context.Context, *BankReceipt) (*BankReceipt, error)
	View(context.Context, *Id) (*BankReceipt, error)
	Update(context.Context, *Id) (*BankReceipt, error)
	List(*EmptyMessage, BankReceiptService_ListServer) error
	mustEmbedUnimplementedBankReceiptServiceServer()
}

// UnimplementedBankReceiptServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBankReceiptServiceServer struct {
}

func (UnimplementedBankReceiptServiceServer) Create(context.Context, *BankReceipt) (*BankReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBankReceiptServiceServer) View(context.Context, *Id) (*BankReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedBankReceiptServiceServer) Update(context.Context, *Id) (*BankReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBankReceiptServiceServer) List(*EmptyMessage, BankReceiptService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBankReceiptServiceServer) mustEmbedUnimplementedBankReceiptServiceServer() {}

// UnsafeBankReceiptServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankReceiptServiceServer will
// result in compilation errors.
type UnsafeBankReceiptServiceServer interface {
	mustEmbedUnimplementedBankReceiptServiceServer()
}

func RegisterBankReceiptServiceServer(s grpc.ServiceRegistrar, srv BankReceiptServiceServer) {
	s.RegisterService(&BankReceiptService_ServiceDesc, srv)
}

func _BankReceiptService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankReceipt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankReceiptServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.ledgers.BankReceiptService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankReceiptServiceServer).Create(ctx, req.(*BankReceipt))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankReceiptService_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankReceiptServiceServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.ledgers.BankReceiptService/View",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankReceiptServiceServer).View(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankReceiptService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankReceiptServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.ledgers.BankReceiptService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankReceiptServiceServer).Update(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankReceiptService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BankReceiptServiceServer).List(m, &bankReceiptServiceListServer{stream})
}

type BankReceiptService_ListServer interface {
	Send(*BankReceipt) error
	grpc.ServerStream
}

type bankReceiptServiceListServer struct {
	grpc.ServerStream
}

func (x *bankReceiptServiceListServer) Send(m *BankReceipt) error {
	return x.ServerStream.SendMsg(m)
}

// BankReceiptService_ServiceDesc is the grpc.ServiceDesc for BankReceiptService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankReceiptService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wiradata.ledgers.BankReceiptService",
	HandlerType: (*BankReceiptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BankReceiptService_Create_Handler,
		},
		{
			MethodName: "View",
			Handler:    _BankReceiptService_View_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BankReceiptService_Update_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _BankReceiptService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ledgers/bank_receipt_service.proto",
}
