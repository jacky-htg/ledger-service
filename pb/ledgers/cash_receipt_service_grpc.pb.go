// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: ledgers/cash_receipt_service.proto

package ledgers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CashReceiptServiceClient is the client API for CashReceiptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CashReceiptServiceClient interface {
	Create(ctx context.Context, in *CashReceipt, opts ...grpc.CallOption) (*CashReceipt, error)
	View(ctx context.Context, in *Id, opts ...grpc.CallOption) (*CashReceipt, error)
	Update(ctx context.Context, in *Id, opts ...grpc.CallOption) (*CashReceipt, error)
	List(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (CashReceiptService_ListClient, error)
}

type cashReceiptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCashReceiptServiceClient(cc grpc.ClientConnInterface) CashReceiptServiceClient {
	return &cashReceiptServiceClient{cc}
}

func (c *cashReceiptServiceClient) Create(ctx context.Context, in *CashReceipt, opts ...grpc.CallOption) (*CashReceipt, error) {
	out := new(CashReceipt)
	err := c.cc.Invoke(ctx, "/wiradata.ledgers.CashReceiptService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashReceiptServiceClient) View(ctx context.Context, in *Id, opts ...grpc.CallOption) (*CashReceipt, error) {
	out := new(CashReceipt)
	err := c.cc.Invoke(ctx, "/wiradata.ledgers.CashReceiptService/View", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashReceiptServiceClient) Update(ctx context.Context, in *Id, opts ...grpc.CallOption) (*CashReceipt, error) {
	out := new(CashReceipt)
	err := c.cc.Invoke(ctx, "/wiradata.ledgers.CashReceiptService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashReceiptServiceClient) List(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (CashReceiptService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &CashReceiptService_ServiceDesc.Streams[0], "/wiradata.ledgers.CashReceiptService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &cashReceiptServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CashReceiptService_ListClient interface {
	Recv() (*CashReceipt, error)
	grpc.ClientStream
}

type cashReceiptServiceListClient struct {
	grpc.ClientStream
}

func (x *cashReceiptServiceListClient) Recv() (*CashReceipt, error) {
	m := new(CashReceipt)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CashReceiptServiceServer is the server API for CashReceiptService service.
// All implementations must embed UnimplementedCashReceiptServiceServer
// for forward compatibility
type CashReceiptServiceServer interface {
	Create(context.Context, *CashReceipt) (*CashReceipt, error)
	View(context.Context, *Id) (*CashReceipt, error)
	Update(context.Context, *Id) (*CashReceipt, error)
	List(*EmptyMessage, CashReceiptService_ListServer) error
	mustEmbedUnimplementedCashReceiptServiceServer()
}

// UnimplementedCashReceiptServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCashReceiptServiceServer struct {
}

func (UnimplementedCashReceiptServiceServer) Create(context.Context, *CashReceipt) (*CashReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCashReceiptServiceServer) View(context.Context, *Id) (*CashReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedCashReceiptServiceServer) Update(context.Context, *Id) (*CashReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCashReceiptServiceServer) List(*EmptyMessage, CashReceiptService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCashReceiptServiceServer) mustEmbedUnimplementedCashReceiptServiceServer() {}

// UnsafeCashReceiptServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CashReceiptServiceServer will
// result in compilation errors.
type UnsafeCashReceiptServiceServer interface {
	mustEmbedUnimplementedCashReceiptServiceServer()
}

func RegisterCashReceiptServiceServer(s grpc.ServiceRegistrar, srv CashReceiptServiceServer) {
	s.RegisterService(&CashReceiptService_ServiceDesc, srv)
}

func _CashReceiptService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CashReceipt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashReceiptServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.ledgers.CashReceiptService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashReceiptServiceServer).Create(ctx, req.(*CashReceipt))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashReceiptService_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashReceiptServiceServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.ledgers.CashReceiptService/View",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashReceiptServiceServer).View(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashReceiptService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashReceiptServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiradata.ledgers.CashReceiptService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashReceiptServiceServer).Update(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashReceiptService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CashReceiptServiceServer).List(m, &cashReceiptServiceListServer{stream})
}

type CashReceiptService_ListServer interface {
	Send(*CashReceipt) error
	grpc.ServerStream
}

type cashReceiptServiceListServer struct {
	grpc.ServerStream
}

func (x *cashReceiptServiceListServer) Send(m *CashReceipt) error {
	return x.ServerStream.SendMsg(m)
}

// CashReceiptService_ServiceDesc is the grpc.ServiceDesc for CashReceiptService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CashReceiptService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wiradata.ledgers.CashReceiptService",
	HandlerType: (*CashReceiptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CashReceiptService_Create_Handler,
		},
		{
			MethodName: "View",
			Handler:    _CashReceiptService_View_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CashReceiptService_Update_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _CashReceiptService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ledgers/cash_receipt_service.proto",
}
